/**
 * Zhihu_Caffee
 * Zhihu_Caffee can craw data from ZhihuDaily and post article by user,  allowing users to reply the article and interact with other users.
 *
 * OpenAPI spec version: 0.1.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Article from '../model/Article';
import Articles from '../model/Articles';

/**
* Article service.
* @module api/ArticleApi
* @version 0.1.4
*/
export default class ArticleApi {

    /**
    * Constructs a new ArticleApi. 
    * @alias module:api/ArticleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createArticle operation.
     * @callback module:api/ArticleApi~createArticleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create an article by a user with specified userid
     * @param {module:api/ArticleApi~createArticleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createArticle(userid, article, callback) {
      let postBody = null;

      let pathParams = {
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
        'article': article
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userid}/articles/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteArticle operation.
     * @callback module:api/ArticleApi~deleteArticleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete an article by userid and article id
     * @param {module:api/ArticleApi~deleteArticleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteArticle(userid, articleid, callback) {
      let postBody = null;

      let pathParams = {
        'userid': userid,
        'articleid': articleid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userid}/articles/{articleid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getArticle operation.
     * @callback module:api/ArticleApi~getArticleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Article} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get article by specified article id
     * @param {module:api/ArticleApi~getArticleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Article}
     */
    getArticle(userid, articleid, callback) {
      let postBody = null;

      let pathParams = {
        'userid': userid,
        'articleid': articleid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Article;

      return this.apiClient.callApi(
        '/api/users/{userid}/articles/{articleid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getArticles operation.
     * @callback module:api/ArticleApi~getArticlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Articles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get articles list written by a user with specified user id
     * @param {Object} opts Optional parameters
     * @param {module:api/ArticleApi~getArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Articles}
     */
    getArticles(userid, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'userid': userid
      };
      let queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Articles;

      return this.apiClient.callApi(
        '/api/users/{userid}/articles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the likeArticle operation.
     * @callback module:api/ArticleApi~likeArticleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * like an article
     * @param {module:api/ArticleApi~likeArticleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    likeArticle(userid, articleid, callback) {
      let postBody = null;

      let pathParams = {
        'userid': userid,
        'articleid': articleid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userid}/articles/{articleid}/like', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateArticle operation.
     * @callback module:api/ArticleApi~updateArticleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update an existed article info by userid and article id
     * @param {module:api/ArticleApi~updateArticleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateArticle(userid, articleid, callback) {
      let postBody = null;

      let pathParams = {
        'userid': userid,
        'articleid': articleid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userid}/articles/{articleid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
