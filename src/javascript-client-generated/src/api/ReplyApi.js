/**
 * Zhihu_Caffe
 * Zhihu_Caffe can craw data from ZhihuDaily and post article by user,  allowing users to reply the article and interact with other users.
 *
 * OpenAPI spec version: 0.1.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Replies from '../model/Replies';
import Reply from '../model/Reply';

/**
* Reply service.
* @module api/ReplyApi
* @version 0.1.4
*/
export default class ReplyApi {

    /**
    * Constructs a new ReplyApi. 
    * @alias module:api/ReplyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createReply operation.
     * @callback module:api/ReplyApi~createReplyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create an reply in a specified article
     * @param {module:api/ReplyApi~createReplyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createReply(userid, articleid, reply, callback) {
      let postBody = null;

      let pathParams = {
        'userid': userid,
        'articleid': articleid
      };
      let queryParams = {
      };
      let headerParams = {
        'reply': reply
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userid}/articles/{articleid}/replies/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getReplies operation.
     * @callback module:api/ReplyApi~getRepliesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Replies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get replies list in a specified article
     * @param {Object} opts Optional parameters
     * @param {module:api/ReplyApi~getRepliesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Replies}
     */
    getReplies(userid, articleid, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'userid': userid,
        'articleid': articleid
      };
      let queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Replies;

      return this.apiClient.callApi(
        '/api/users/{userid}/articles/{articleid}/replies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getReply operation.
     * @callback module:api/ReplyApi~getReplyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a reply with reply id in a specified article
     * @param {module:api/ReplyApi~getReplyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reply}
     */
    getReply(userid, articleid, replyid, callback) {
      let postBody = null;

      let pathParams = {
        'userid': userid,
        'articleid': articleid,
        'replyid': replyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Reply;

      return this.apiClient.callApi(
        '/api/users/{userid}/articles/{articleid}/replies/{replyid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the likeReply operation.
     * @callback module:api/ReplyApi~likeReplyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * like a reply in a specified article
     * @param {module:api/ReplyApi~likeReplyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    likeReply(userid, articleid, replyid, callback) {
      let postBody = null;

      let pathParams = {
        'userid': userid,
        'articleid': articleid,
        'replyid': replyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userid}/articles/{articleid}/replies/{replyid}/like', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
