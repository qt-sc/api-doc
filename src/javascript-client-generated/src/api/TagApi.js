/**
 * Zhihu_Caffe
 * Zhihu_Caffe can craw data from ZhihuDaily and post article by user,  allowing users to reply the article and interact with other users.
 *
 * OpenAPI spec version: 0.1.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Articles from '../model/Articles';
import Tags from '../model/Tags';

/**
* Tag service.
* @module api/TagApi
* @version 0.1.4
*/
export default class TagApi {

    /**
    * Constructs a new TagApi. 
    * @alias module:api/TagApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getTags operation.
     * @callback module:api/TagApi~getTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tags} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get tag list
     * Returns a list containing all tags.
     * @param {Object} opts Optional parameters
     * @param {module:api/TagApi~getTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tags}
     */
    getTags(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tags;

      return this.apiClient.callApi(
        '/api/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchArticlesByTag operation.
     * @callback module:api/TagApi~searchArticlesByTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Articles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/TagApi~searchArticlesByTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Articles}
     */
    searchArticlesByTag(tagname, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'tagname': tagname
      };
      let queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Articles;

      return this.apiClient.callApi(
        '/api/tags/{tagname}/articles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
